{"version":3,"file":"tenderly.api.js","sourceRoot":"/","sources":["src/tenderly/tenderly.api.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChainId, ErrorCode } from '@lifi/types'\n\nimport { HttpResponse, http } from '@tenderlysim/http'\nimport { logger } from 'logger'\nimport { LifiError, getErrorMessage } from '@tenderlysim/common'\n\nimport {\n  TENDERLY_BASE_URL,\n  TENDERLY_CHAINS,\n  TENDERLY_REQUEST_HEADERS,\n  TenderlyConfig,\n  projectBaseUrl,\n} from './tenderly.config'\nimport {\n  TenderlyContract,\n  TenderlyProjectContract,\n} from './tenderly.types.contract'\nimport {\n  TenderlySimulationResponse,\n  TenderlyTransactionResponse,\n} from './tenderly.types'\n\nexport const getTokenContract =\n  (tenderlyConfig: TenderlyConfig) =>\n  async (\n    chainId: ChainId,\n    tokenAddress: string\n  ): Promise<TenderlyContract | undefined> => {\n    const url = `${projectBaseUrl(tenderlyConfig)}/contract/${chainId}/${tokenAddress}`\n    try {\n      const result = await http().get<TenderlyProjectContract>(url, {\n        headers: TENDERLY_REQUEST_HEADERS(tenderlyConfig.accessKey),\n      })\n      return result.data.contract\n    } catch (e) {\n      logger().warn(`[tenderly] getTokenContract failed ${e}`)\n      return undefined\n    }\n  }\n\nexport const getPublicTokenContract = async (\n  chainId: ChainId,\n  tokenAddress: string\n): Promise<TenderlyContract | undefined> => {\n  const url = `${TENDERLY_BASE_URL}public-contracts/${chainId}/${tokenAddress}`\n  try {\n    const result = await http().get<TenderlyContract>(url)\n    return result.data\n  } catch (e) {\n    logger().warn(`[tenderly] getPublicTokenContract failed ${e}`)\n    return undefined\n  }\n}\n\nexport const encodeContractStates =\n  (tenderlyConfig: TenderlyConfig) =>\n  async (\n    chainId: ChainId,\n    tokenAddress: string,\n    tokenImplementationAddress: string,\n    mappings: Record<string, string>\n  ) => {\n    const url = `${projectBaseUrl(tenderlyConfig)}/contracts/encode-states`\n    const request = {\n      networkID: chainId.toString(),\n      stateOverrides: {\n        [tokenImplementationAddress]: {\n          value: mappings,\n        },\n      },\n    }\n\n    const encodedState = await http().post(url, request, {\n      headers: TENDERLY_REQUEST_HEADERS(tenderlyConfig.accessKey),\n    })\n\n    return {\n      [tokenAddress]: {\n        storage:\n          encodedState.data.stateOverrides[tokenImplementationAddress].value,\n      },\n    }\n  }\n\nexport const simulateTransaction =\n  (tenderlyConfig: TenderlyConfig) => async (data: any) => {\n    const url = `${projectBaseUrl(tenderlyConfig)}/simulate`\n    const result = await http().post<TenderlySimulationResponse>(url, data, {\n      headers: TENDERLY_REQUEST_HEADERS(tenderlyConfig.accessKey),\n    })\n    const link = `https://dashboard.tenderly.co/${tenderlyConfig.user}/${tenderlyConfig.project}/simulator/${result.data.simulation.id}`\n\n    return {\n      ...result.data,\n      link,\n    }\n  }\n\nconst validateTransactionDetailsResponse = (\n  response: HttpResponse<TenderlyTransactionResponse>\n) => {\n  if (response.status === 401) {\n    const unauthorizedError = LifiError({\n      message: 'Get transaction information call is Unauthorized',\n      code: ErrorCode.UnauthorizedError,\n    })\n\n    return unauthorizedError\n  }\n\n  if (response.status == 404) {\n    return LifiError({\n      message: 'The tx was not found by Tenderly',\n      code: ErrorCode.NotFoundError,\n    })\n  }\n\n  return response\n}\n\nexport const getTransactionDetails =\n  (tenderlyConfig: TenderlyConfig) =>\n  async (\n    txHash: string,\n    chainId: ChainId\n  ): Promise<TenderlyTransactionResponse> => {\n    if (!TENDERLY_CHAINS.includes(chainId)) {\n      throw LifiError({\n        message: 'The requested tx chain is not supported by Tenderly',\n        code: ErrorCode.NotProcessableError,\n      })\n    }\n\n    try {\n      const response = await http().get<TenderlyTransactionResponse>(\n        `${TENDERLY_BASE_URL}account/${tenderlyConfig.user}/project/${tenderlyConfig.project}/network/${chainId}/transaction/${txHash}`,\n        { headers: TENDERLY_REQUEST_HEADERS(tenderlyConfig.accessKey) }\n      )\n\n      const validatedResponse = validateTransactionDetailsResponse(response)\n\n      if (validatedResponse instanceof LifiError) throw validatedResponse\n\n      return response.data\n    } catch (error) {\n      logger().warn(\n        `[tenderly] Get transaction information call failed: ${getErrorMessage(\n          error\n        )}`\n      )\n      throw LifiError({\n        message: 'The getTransactionDetails call failed',\n        code: ErrorCode.ThirdPartyError,\n      })\n    }\n  }\n"]}