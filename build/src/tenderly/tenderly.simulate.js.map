{"version":3,"file":"tenderly.simulate.js","sourceRoot":"/","sources":["src/tenderly/tenderly.simulate.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChainId, ErrorCode, LiFiStep, TransactionRequest } from '@lifi/types'\n\nimport { LifiError } from '@tenderlysim/common'\nimport { logger } from '@tenderlysim/logger'\n\nimport { simulateTransaction } from './tenderly.api'\nimport {\n  TENDERLY_CHAINS,\n  TenderlyConfig,\n  knownFailingTokens,\n} from './tenderly.config'\nimport { getTokenOverwrite } from './tenderly.overwrites'\n\n// TODO: improve code quality\n/* eslint-disable complexity, max-lines-per-function */\n\nconst validateTransactionRequest = (\n  transactionRequest?: TransactionRequest\n) => {\n  if (transactionRequest === undefined)\n    throw LifiError({\n      message: `No transaction request passed`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.from === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing from`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.to === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing to`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.chainId === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing chainId`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.data === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing data`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.gasPrice === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing gasPrice`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.gasLimit === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing gasLimit`,\n      code: ErrorCode.MalformedSchema,\n    })\n  if (transactionRequest.value === undefined)\n    throw LifiError({\n      message: `transactionRequest is missing value`,\n      code: ErrorCode.MalformedSchema,\n    })\n\n  return {\n    from: transactionRequest.from,\n    to: transactionRequest.to,\n    chainId: transactionRequest.chainId,\n    data: transactionRequest.data,\n    gasPrice: transactionRequest.gasPrice,\n    gasLimit: transactionRequest.gasLimit,\n    value: transactionRequest.value,\n  }\n}\n\nexport const getStateOverwrites =\n  (tenderlyConfig: TenderlyConfig) =>\n  async (\n    overwrites = {\n      senderTokenBalanceAndApproval: true,\n      senderNativeBalance: true,\n    },\n    params: {\n      chainId: number\n      tokenAddress: string\n      amount: string\n      ownerAddress: string\n      spenderAddress: string\n    }\n  ): Promise<Record<string, string>> => {\n    let stateOverwrites: Record<string, any> = {}\n    if (overwrites.senderTokenBalanceAndApproval) {\n      const tokenOverwrite = await getTokenOverwrite(tenderlyConfig)(params)\n      stateOverwrites = {\n        ...stateOverwrites,\n        ...tokenOverwrite,\n      }\n    }\n    if (overwrites.senderNativeBalance) {\n      stateOverwrites = {\n        ...stateOverwrites,\n\n        // enough gas + value on sender\n        [params.ownerAddress]: {\n          balance: '10000000000000000000000000',\n        },\n      }\n    }\n\n    return stateOverwrites\n  }\n\nexport const simulate =\n  (tenderlyConfig: TenderlyConfig) =>\n  async (\n    quote: LiFiStep,\n    overwrites = {\n      senderTokenBalanceAndApproval: true,\n      senderNativeBalance: true,\n    }\n  ) => {\n    // tenderly supported\n    if (!TENDERLY_CHAINS.includes(quote.action.fromChainId)) {\n      return {\n        result: 'IMPOSSIBLE',\n        error: 'TENDERLY_UNSUPPORTED_CHAIN',\n        link: undefined,\n        simulation: undefined,\n      }\n    }\n    // token supported\n    if (\n      knownFailingTokens[quote.action.fromChainId]?.includes(\n        quote.action.fromToken.address.toLowerCase() as Lowercase<string>\n      )\n    ) {\n      return {\n        result: 'IMPOSSIBLE',\n        error: 'TENDERLY_UNSUPPORTED_TOKEN',\n        link: undefined,\n        simulation: undefined,\n      }\n    }\n    const transactionRequest = validateTransactionRequest(\n      quote.transactionRequest\n    )\n\n    let stateOverwrites\n    try {\n      stateOverwrites = await getStateOverwrites(tenderlyConfig)(overwrites, {\n        chainId: quote.action.fromChainId,\n        tokenAddress: quote.action.fromToken.address,\n        amount: quote.action.fromAmount,\n        ownerAddress: transactionRequest.from,\n        spenderAddress: transactionRequest.to,\n      })\n    } catch (e) {\n      logger().error(e)\n      return {\n        result: 'IMPOSSIBLE',\n        error: 'MAPPING_MISSING',\n        link: undefined,\n        simulation: undefined,\n      }\n    }\n\n    // Overwrite for optimism bridge gas simulation issues:\n    // Simulation of calls that make use of the native optimism bridge fail because the code tries to burn gas.\n    // Hop uses the optimism bridge internally for transfers between ETH and OPT.\n    if (\n      (quote.tool === 'optimism' || quote.tool === 'hop') &&\n      quote.action.fromChainId === ChainId.ETH &&\n      quote.action.toChainId === ChainId.OPT\n    ) {\n      // Default gas limit used by tenderly\n      transactionRequest.gasLimit = '8000000'\n    }\n\n    // Overwrite for transactions on specific L2s\n    // So we can test the transactions even if the gasLimits the API returns are too low\n    if (quote.action.fromChainId === ChainId.ARB) {\n      transactionRequest.gasLimit = '20000000'\n    }\n    if (quote.action.fromChainId === ChainId.MNT) {\n      transactionRequest.gasLimit = '' // do not pass a limit\n    }\n\n    const data = {\n      /* Simulation Configuration */\n      save: true, // if true simulation is saved and shows up in the dashboard\n      save_if_fails: true, // if true, reverting simulations show up in the dashboard\n      simulation_type: 'full', // full or quick (full is default)\n\n      network_id: transactionRequest.chainId.toString(),\n\n      /* Standard EVM Transaction object */\n      from: transactionRequest.from,\n      input: transactionRequest.data,\n      to: transactionRequest.to,\n      gas:\n        transactionRequest.gasLimit === ''\n          ? undefined\n          : Number(BigInt(transactionRequest.gasLimit)),\n      gas_price: BigInt(transactionRequest.gasPrice).toString(),\n      value: BigInt(transactionRequest.value).toString(),\n\n      /* Advanced */\n      state_objects: stateOverwrites,\n    }\n\n    try {\n      const result = await simulateTransaction(tenderlyConfig)(data)\n      return {\n        result: result.simulation.status ? 'WORKED' : 'FAILED',\n        error: result.simulation.status\n          ? undefined\n          : result.transaction.error_message,\n        simulation: result.simulation,\n        link: result.link,\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        return {\n          result: 'FAILED',\n          error: e.message,\n        }\n      } else {\n        return {\n          result: 'FAILED',\n          error: 'REQUEST_FAILED',\n        }\n      }\n    }\n  }\n"]}